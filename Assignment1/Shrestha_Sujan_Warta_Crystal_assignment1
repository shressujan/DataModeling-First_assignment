{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/crystalwarta/opt/anaconda3/lib/python3.7/site-packages/IPython/core/interactiveshell.py:3058: DtypeWarning: Columns (10) have mixed types. Specify dtype option on import or set low_memory=False.\n",
      "  interactivity=interactivity, compiler=compiler, result=result)\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[-0.47507326 -0.21268576]\n",
      " [ 2.28164414  6.26294717]\n",
      " [ 1.44246388  0.26318773]]\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "[[-0.4729905  -0.21224978]\n",
      " [ 1.44944221  0.26519616]\n",
      " [ 2.28164414  6.26294717]]\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "import numpy as np\n",
    "from numpy import genfromtxt\n",
    "import pandas as pd\n",
    "from sklearn.preprocessing import StandardScaler\n",
    "import matplotlib.pyplot as plt \n",
    "import math\n",
    "from sklearn.cluster import KMeans\n",
    "import seaborn as sns; sns.set()\n",
    "%matplotlib inline\n",
    "    \n",
    "class Kmeans:\n",
    "    \n",
    "    def yolo(self, X):\n",
    "        print(X)\n",
    "    \n",
    "    def __init__(self):\n",
    "        print()\n",
    "\n",
    "    def score(self, X):\n",
    "        inertia = 0\n",
    "        for a in range(rowsOfData):\n",
    "            if thisInstance.distance_metric==\"euclidean\":\n",
    "                inertia = inertia + (np.linalg.norm(X[a]-closestCentroidArray[a]))**2\n",
    "            else:\n",
    "                inertia = inertia + (abs(X[a,0] - closestCentroidArray[a,0]) + \\\n",
    "                                     abs(X[a,1] - closestCentroidArray[a,1]) + \\\n",
    "                                     abs(X[a,2] - closestCentroidArray[a,2]) + \\\n",
    "                                     abs(X[a,3] - closestCentroidArray[a,3]) + \\\n",
    "                                     abs(X[a,4] - closestCentroidArray[a,4]) + \\\n",
    "                                     abs(X[a,5] - closestCentroidArray[a,5]))**2\n",
    "        return inertia\n",
    "    \n",
    "    def fit(self, X, k, n_init, max_iter=300, tol=1e-4, distance_metric=\"euclidean\"):\n",
    "        thisInstance.distance_metric = distance_metric\n",
    "        \n",
    "        X1 = X[:,0]\n",
    "        X2 = X[:,1]\n",
    "    \n",
    "    \n",
    "        bestInertia = math.inf\n",
    "        for y in range(0,n_init):\n",
    "\n",
    "    \n",
    "            #plt.plot() \n",
    "            #plt.title('Dataset1') \n",
    "            #plt.scatter(X1, X2)\n",
    "        \n",
    "            previousInertia = math.inf\n",
    "    \n",
    "    \n",
    "            #K-Means++ *************************************************\n",
    "        \n",
    "            #get a random centroid\n",
    "            random = X[np.random.randint(rowsOfData, size=1), :]\n",
    "\n",
    "            centroids = np.array(random)\n",
    "    \n",
    "            #plot first centroid\n",
    "            #plt.scatter(centroids[:,0], centroids[:,1], color = 'red', zorder=10)\n",
    "        \n",
    "            #keep an array of the shortest distance to a centroid for each point\n",
    "            closestDistToCentroid = np.zeros(shape=(rowsOfData,1))\n",
    "        \n",
    "            #keep a sum of the distances from all points to their closest centroid\n",
    "            sumOfDistancesToCentroidSquared = 0\n",
    "\n",
    "            #getting initial centroids\n",
    "            for a in range(k-1):\n",
    "                farthestDist = 0\n",
    "                for b in range(rowsOfData):\n",
    "                    closestDistToCentroid[b] = math.inf\n",
    "                    for c in range(centroids.shape[0]): \n",
    "                        if distance_metric==\"euclidean\":\n",
    "                            distanceToACentroid = np.linalg.norm(X[b,:]-centroids[c,:])\n",
    "                        else:\n",
    "                            distanceToACentroid = abs(X[b,0] - centroids[c,0]) + \\\n",
    "                            abs(X[b,1] - centroids[c,1]) + abs(X[b,2] - centroids[c,2]) + \\\n",
    "                            abs(X[b,3] - centroids[c,3]) + abs(X[b,4] - centroids[c,4]) + abs(X[b,5] - centroids[c,5])\n",
    "                        \n",
    "                        if closestDistToCentroid[b] > distanceToACentroid:\n",
    "                            closestDistToCentroid[b] = distanceToACentroid\n",
    "                            closestCentroid = centroids[c,:]\n",
    "                        \n",
    "                    sumOfDistancesToCentroidSquared = sumOfDistancesToCentroidSquared + (closestDistToCentroid[b])**2\n",
    "\n",
    "                #get distribution of each point of data\n",
    "                distribution = np.zeros(shape=(rowsOfData))\n",
    "            \n",
    "                for b in range(rowsOfData):\n",
    "                    distribution[b] = ((closestDistToCentroid[b])**2) / sumOfDistancesToCentroidSquared\n",
    "            \n",
    "                #make sure distribution adds up to 1\n",
    "                p = np.array(distribution)\n",
    "\n",
    "                p /= p.sum()\n",
    "            \n",
    "                #This is the point the distrubution picked to be the centroid\n",
    "                farthestPointByDistribution = np.random.choice(rowsOfData, 1, p=p)\n",
    "            \n",
    "                #add and plot new centroid\n",
    "                centroids = np.vstack([centroids, X[farthestPointByDistribution]])\n",
    "                #plt.scatter(X[farthestPointByDistribution,0], X[farthestPointByDistribution,1],  color = 'red', zorder=30)\n",
    "        \n",
    "        \n",
    "            #END K-Means++ ***************************************************\n",
    "    \n",
    "    \n",
    "            for z in range(0,max_iter):\n",
    "                #K-Means Assignment step ***************************************\n",
    "        \n",
    "                for a in range(rowsOfData):\n",
    "                    closestDistToCentroid = math.inf\n",
    "                    for b in range(k): \n",
    "                        if distance_metric==\"euclidean\":\n",
    "                            distanceToACentroid = np.linalg.norm(X[a,:]-centroids[b,:])\n",
    "                        else:\n",
    "                            distanceToACentroid = abs(X[a,0] - centroids[b,0]) + \\\n",
    "                            abs(X[a,1] - centroids[b,1]) + abs(X[a,2] - centroids[b,2])\n",
    "                            abs(X[a,3] - centroids[b,3]) + abs(X[a,4] - centroids[b,4]) + abs(X[a,5] - centroids[b,5])\n",
    "                        if closestDistToCentroid > distanceToACentroid:\n",
    "                            closestDistToCentroid = distanceToACentroid\n",
    "                            closestCentroid = centroids[b,:]\n",
    "                    closestCentroidArray[a] = closestCentroid\n",
    "    \n",
    "        \n",
    "                #K-Means Recenter step ******************************************\n",
    "\n",
    "    \n",
    "                #adds up all of the X plots for that centroid\n",
    "                sumOfAllX = np.zeros(shape=(k,1))\n",
    "                sumOfAllY = np.zeros(shape=(k,1))\n",
    "    \n",
    "                #keeps the number of points that are closest to that centroid\n",
    "                numberOfClosePoints = np.zeros(shape=(centroids.shape[0],1))\n",
    "    \n",
    "    \n",
    "                for a in range(rowsOfData):\n",
    "                    for b in range(k): \n",
    "                        if closestCentroidArray[a,0] == centroids[b,0] and closestCentroidArray[a,1] == centroids[b,1]:\n",
    "                            sumOfAllX[b,0] = sumOfAllX[b,0] + X[a,0]\n",
    "                            sumOfAllY[b,0] = sumOfAllY[b,0] + X[a,1]\n",
    "                            numberOfClosePoints[b] = numberOfClosePoints[b] + 1\n",
    "                \n",
    "                #print(numberOfClosePoints)\n",
    "                \n",
    "                MeanOfX = np.zeros(shape=(k,1))    \n",
    "                MeanOfY = np.zeros(shape=(k,1)) \n",
    "    \n",
    "                #get the new cluster centers\n",
    "                for a in range(k):\n",
    "                    MeanOfX[a,0] = sumOfAllX[a,0]/numberOfClosePoints[a]\n",
    "                    MeanOfY[a,0] = sumOfAllY[a,0]/numberOfClosePoints[a]\n",
    "        \n",
    "                #plt.scatter(MeanOfX, MeanOfY, color=\"black\", zorder=5) \n",
    "        \n",
    "        \n",
    "        \n",
    "        \n",
    "                #get score of this test\n",
    "            \n",
    "                inertia = thisInstance.score(X)       \n",
    "        \n",
    "                #run kmeans until inertia is less than tolerance\n",
    "                if tol > previousInertia - inertia:  \n",
    "                    break\n",
    "            \n",
    "                previousInertia = inertia\n",
    "        \n",
    "                #new centroids\n",
    "                for a in range(k):\n",
    "                    centroids[a,0] = MeanOfX[a,0]\n",
    "                    centroids[a,1] = MeanOfY[a,0]\n",
    "        \n",
    "        \n",
    "            #plt.scatter(MeanOfX, MeanOfY, color=\"yellow\", zorder=20) \n",
    "            #plt.show() \n",
    "    \n",
    "        #get best result\n",
    "            if bestInertia > inertia:\n",
    "                bestInertia = inertia\n",
    "                bestCentroids = centroids\n",
    "                \n",
    "                \n",
    "        closestCentroidz = np.zeros(shape=(centers.shape[0]))\n",
    "        for a in range(rowsOfData):\n",
    "            minDist = math.inf\n",
    "            for b in range(centroids.shape[0]):\n",
    "                #print(X[a])\n",
    "                #print(centers[b])\n",
    "                distanceToACentroid = np.linalg.norm(X[a]-centroids[b])\n",
    "                if minDist > distanceToACentroid:\n",
    "                    minDist = distanceToACentroid\n",
    "                    minCentroid = b\n",
    "            closestCentroidz[minCentroid] = closestCentroidz[minCentroid] + 1\n",
    "                \n",
    "        #print(closestCentroidz)\n",
    "        print(bestCentroids)\n",
    "        \n",
    "        plt.scatter(X1, X2, color=\"blue\", zorder=10)\n",
    "        plt.scatter(bestCentroids[:,0], bestCentroids[:,1], color=\"yellow\", zorder=20) \n",
    "        plt.show()\n",
    "    \n",
    "distance_metric=\"\"\n",
    "\n",
    "all_data = pd.read_csv('/Users/crystalwarta/Downloads/movies_metadata.csv')\n",
    "\n",
    "all_data = all_data.dropna()\n",
    "\n",
    "all_data.drop(all_data[all_data['vote_count'] <= 30 ].index, inplace=True)\n",
    "\n",
    "#my_data = all_data[['budget', 'popularity', 'revenue', 'runtime', 'vote_average', 'vote_count']].copy()\n",
    "my_data = all_data[['vote_count', 'popularity']].copy()\n",
    "\n",
    "#col_names = ['budget', 'popularity', 'revenue', 'runtime', 'vote_average', 'vote_count']\n",
    "col_names = ['vote_count', 'popularity']\n",
    "\n",
    "scaler = StandardScaler()\n",
    "\n",
    "X = my_data.to_numpy()\n",
    "\n",
    "X = scaler.fit_transform(X)\n",
    "\n",
    "\n",
    "kmeans = KMeans(n_clusters=3, init=\"k-means++\")\n",
    "kmeans.fit(X)\n",
    "y_kmeans = kmeans.predict(X)\n",
    "plt.scatter(X[:, 0], X[:, 1], c=y_kmeans, s=50, cmap='viridis')\n",
    "centers = kmeans.cluster_centers_\n",
    "print(centers)\n",
    "plt.scatter(centers[:, 0], centers[:, 1], c='black', s=200, alpha=0.5);\n",
    "\n",
    "\n",
    "# for a in range(rowsOfData):\n",
    "#     minDist = math.inf\n",
    "#     for b in range(centers.shape[0]):\n",
    "#         #print(X[a])\n",
    "#         #print(centers[b])\n",
    "#         distanceToACentroid = np.linalg.norm(X[a]-centers[b])\n",
    "#         if minDist > distanceToACentroid:\n",
    "#             minDist = distanceToACentroid\n",
    "#             minCentroid = b\n",
    "#     closestCentroid[minCentroid] = closestCentroid[minCentroid] + 1\n",
    "            \n",
    "# print(closestCentroid)\n",
    "plt.show()\n",
    "\n",
    "closestCentroid = np.zeros(shape=(centers.shape[0]))\n",
    "rowsOfData = X.shape[0];\n",
    "closestCentroidArray = np.zeros(shape=(rowsOfData,2))\n",
    "\n",
    "thisInstance = Kmeans()\n",
    "\n",
    "thisInstance.fit(X, 3, 50)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/crystalwarta/opt/anaconda3/lib/python3.7/site-packages/IPython/core/interactiveshell.py:3058: DtypeWarning: Columns (10) have mixed types. Specify dtype option on import or set low_memory=False.\n",
      "  interactivity=interactivity, compiler=compiler, result=result)\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[-0.63050112 -0.26739067 -0.62186244 -0.72629776 -0.57571634 -0.65347652]\n",
      " [ 0.050252   -0.06704524 -0.01112001  0.32636985  0.29929201  0.00592867]\n",
      " [ 1.57775818  0.89271171  1.70970721  1.1380529   0.79939194  1.75205069]]\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "[[-0.15687273 -0.07436719  0.13494597 -0.21259855  0.96061644 -0.19579657]\n",
      " [ 1.60364699  0.85843543  1.98224387  1.31191724  1.18315166  1.64091453]\n",
      " [-0.43611187 -0.24272864 -0.66975665 -0.30227595 -1.15346815 -0.71899433]]\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "import numpy as np\n",
    "from numpy import genfromtxt\n",
    "import pandas as pd\n",
    "from sklearn.preprocessing import StandardScaler\n",
    "import matplotlib.pyplot as plt \n",
    "import math\n",
    "from sklearn.cluster import KMeans\n",
    "import seaborn as sns; sns.set()\n",
    "%matplotlib inline\n",
    "    \n",
    "class Kmeans:\n",
    "    \n",
    "    def yolo(self, X):\n",
    "        print(X)\n",
    "    \n",
    "    def __init__(self):\n",
    "        print()\n",
    "\n",
    "    def score(self, X):\n",
    "        inertia = 0\n",
    "        for a in range(rowsOfData):\n",
    "            if thisInstance.distance_metric==\"euclidean\":\n",
    "                inertia = inertia + (np.linalg.norm(X[a]-closestCentroidArray[a]))**2\n",
    "            else:\n",
    "                inertia = inertia + (abs(X[a,0] - closestCentroidArray[a,0]) + \\\n",
    "                                     abs(X[a,1] - closestCentroidArray[a,1]) + \\\n",
    "                                     abs(X[a,2] - closestCentroidArray[a,2]) + \\\n",
    "                                     abs(X[a,3] - closestCentroidArray[a,3]) + \\\n",
    "                                     abs(X[a,4] - closestCentroidArray[a,4]) + \\\n",
    "                                     abs(X[a,5] - closestCentroidArray[a,5]))**2\n",
    "        return inertia\n",
    "    \n",
    "    def fit(self, X, k, n_init, max_iter=300, tol=1e-4, distance_metric=\"euclidean\"):\n",
    "        thisInstance.distance_metric = distance_metric\n",
    "        \n",
    "        X1 = X[:,0]\n",
    "        X2 = X[:,1]\n",
    "    \n",
    "    \n",
    "        bestInertia = math.inf\n",
    "        for y in range(0,n_init):\n",
    "\n",
    "    \n",
    "            #plt.plot() \n",
    "            #plt.title('Dataset1') \n",
    "            #plt.scatter(X1, X2)\n",
    "        \n",
    "            previousInertia = math.inf\n",
    "    \n",
    "    \n",
    "            #K-Means++ *************************************************\n",
    "        \n",
    "            #get a random centroid\n",
    "            random = X[np.random.randint(rowsOfData, size=1), :]\n",
    "\n",
    "            centroids = np.array(random)\n",
    "    \n",
    "            #plot first centroid\n",
    "            #plt.scatter(centroids[:,0], centroids[:,1], color = 'red', zorder=10)\n",
    "        \n",
    "            #keep an array of the shortest distance to a centroid for each point\n",
    "            closestDistToCentroid = np.zeros(shape=(rowsOfData,1))\n",
    "        \n",
    "            #keep a sum of the distances from all points to their closest centroid\n",
    "            sumOfDistancesToCentroidSquared = 0\n",
    "\n",
    "            #getting initial centroids\n",
    "            for a in range(k-1):\n",
    "                farthestDist = 0\n",
    "                for b in range(rowsOfData):\n",
    "                    closestDistToCentroid[b] = math.inf\n",
    "                    for c in range(centroids.shape[0]): \n",
    "                        if distance_metric==\"euclidean\":\n",
    "                            distanceToACentroid = np.linalg.norm(X[b,:]-centroids[c,:])\n",
    "                        else:\n",
    "                            distanceToACentroid = abs(X[b,0] - centroids[c,0]) + \\\n",
    "                            abs(X[b,1] - centroids[c,1]) + abs(X[b,2] - centroids[c,2]) + \\\n",
    "                            abs(X[b,3] - centroids[c,3]) + abs(X[b,4] - centroids[c,4]) + abs(X[b,5] - centroids[c,5])\n",
    "                        \n",
    "                        if closestDistToCentroid[b] > distanceToACentroid:\n",
    "                            closestDistToCentroid[b] = distanceToACentroid\n",
    "                            closestCentroid = centroids[c,:]\n",
    "                        \n",
    "                    sumOfDistancesToCentroidSquared = sumOfDistancesToCentroidSquared + (closestDistToCentroid[b])**2\n",
    "\n",
    "                #get distribution of each point of data\n",
    "                distribution = np.zeros(shape=(rowsOfData))\n",
    "            \n",
    "                for b in range(rowsOfData):\n",
    "                    distribution[b] = ((closestDistToCentroid[b])**2) / sumOfDistancesToCentroidSquared\n",
    "            \n",
    "                #make sure distribution adds up to 1\n",
    "                p = np.array(distribution)\n",
    "\n",
    "                p /= p.sum()\n",
    "            \n",
    "                #This is the point the distrubution picked to be the centroid\n",
    "                farthestPointByDistribution = np.random.choice(rowsOfData, 1, p=p)\n",
    "            \n",
    "                #add and plot new centroid\n",
    "                centroids = np.vstack([centroids, X[farthestPointByDistribution]])\n",
    "                #plt.scatter(X[farthestPointByDistribution,0], X[farthestPointByDistribution,1],  color = 'red', zorder=30)\n",
    "        \n",
    "        \n",
    "            #END K-Means++ ********************************************\n",
    "    \n",
    "    \n",
    "            for z in range(0,max_iter):\n",
    "                #K-Means Assignment step *************************************\n",
    "        \n",
    "                for a in range(rowsOfData):\n",
    "                    closestDistToCentroid = math.inf\n",
    "                    for b in range(k): \n",
    "                        if distance_metric==\"euclidean\":\n",
    "                            distanceToACentroid = np.linalg.norm(X[a,:]-centroids[b,:])\n",
    "                        else:\n",
    "                            distanceToACentroid = abs(X[a,0] - centroids[b,0]) + \\\n",
    "                            abs(X[a,1] - centroids[b,1]) + abs(X[a,2] - centroids[b,2])\n",
    "                            abs(X[a,3] - centroids[b,3]) + abs(X[a,4] - centroids[b,4]) + abs(X[a,5] - centroids[b,5])\n",
    "                        if closestDistToCentroid > distanceToACentroid:\n",
    "                            closestDistToCentroid = distanceToACentroid\n",
    "                            closestCentroid = centroids[b,:]\n",
    "                    closestCentroidArray[a] = closestCentroid\n",
    "    \n",
    "        \n",
    "                #K-Means Recenter step **************************************\n",
    "\n",
    "    \n",
    "                #adds up all of the X plots for that centroid\n",
    "                sumOfAllX = np.zeros(shape=(k,1))\n",
    "                sumOfAllY = np.zeros(shape=(k,1))\n",
    "    \n",
    "                #keeps the number of points that are closest to that centroid\n",
    "                numberOfClosePoints = np.zeros(shape=(centroids.shape[0],1))\n",
    "    \n",
    "    \n",
    "                for a in range(rowsOfData):\n",
    "                    for b in range(k): \n",
    "                        if closestCentroidArray[a,0] == centroids[b,0] and closestCentroidArray[a,1] == centroids[b,1]:\n",
    "                            sumOfAllX[b,0] = sumOfAllX[b,0] + X[a,0]\n",
    "                            sumOfAllY[b,0] = sumOfAllY[b,0] + X[a,1]\n",
    "                            numberOfClosePoints[b] = numberOfClosePoints[b] + 1\n",
    "                \n",
    "                #print(numberOfClosePoints)\n",
    "                \n",
    "                MeanOfX = np.zeros(shape=(k,1))    \n",
    "                MeanOfY = np.zeros(shape=(k,1)) \n",
    "    \n",
    "                #get the new cluster centers\n",
    "                for a in range(k):\n",
    "                    MeanOfX[a,0] = sumOfAllX[a,0]/numberOfClosePoints[a]\n",
    "                    MeanOfY[a,0] = sumOfAllY[a,0]/numberOfClosePoints[a]\n",
    "        \n",
    "                #plt.scatter(MeanOfX, MeanOfY, color=\"black\", zorder=5) \n",
    "        \n",
    "        \n",
    "        \n",
    "        \n",
    "                #get score of this test\n",
    "            \n",
    "                inertia = thisInstance.score(X)       \n",
    "        \n",
    "                #run kmeans until inertia is less than tolerance\n",
    "                if tol > previousInertia - inertia:  \n",
    "                    break\n",
    "            \n",
    "                previousInertia = inertia\n",
    "        \n",
    "                #new centroids\n",
    "                for a in range(k):\n",
    "                    centroids[a,0] = MeanOfX[a,0]\n",
    "                    centroids[a,1] = MeanOfY[a,0]\n",
    "        \n",
    "        \n",
    "            #plt.scatter(MeanOfX, MeanOfY, color=\"yellow\", zorder=20) \n",
    "            #plt.show() \n",
    "    \n",
    "        #get best result\n",
    "            if bestInertia > inertia:\n",
    "                bestInertia = inertia\n",
    "                bestCentroids = centroids\n",
    "                \n",
    "                \n",
    "        closestCentroidz = np.zeros(shape=(centers.shape[0]))\n",
    "        for a in range(rowsOfData):\n",
    "            minDist = math.inf\n",
    "            for b in range(centroids.shape[0]):\n",
    "                #print(X[a])\n",
    "                #print(centers[b])\n",
    "                distanceToACentroid = np.linalg.norm(X[a]-centroids[b])\n",
    "                if minDist > distanceToACentroid:\n",
    "                    minDist = distanceToACentroid\n",
    "                    minCentroid = b\n",
    "            closestCentroidz[minCentroid] = closestCentroidz[minCentroid] + 1\n",
    "                \n",
    "        #print(closestCentroidz)\n",
    "        print(bestCentroids)\n",
    "        \n",
    "        plt.scatter(X1, X2, color=\"blue\", zorder=10)\n",
    "        plt.scatter(bestCentroids[:,0], bestCentroids[:,1], color=\"yellow\", zorder=20) \n",
    "        plt.show()\n",
    "    \n",
    "distance_metric=\"\"\n",
    "\n",
    "all_data = pd.read_csv('/Users/crystalwarta/Downloads/movies_metadata.csv')\n",
    "\n",
    "all_data = all_data.dropna()\n",
    "\n",
    "all_data.drop(all_data[all_data['vote_count'] <= 30 ].index, inplace=True)\n",
    "\n",
    "my_data = all_data[['budget', 'popularity', 'revenue', 'runtime', 'vote_average', 'vote_count']].copy()\n",
    "#my_data = all_data[['vote_count', 'popularity']].copy()\n",
    "\n",
    "col_names = ['budget', 'popularity', 'revenue', 'runtime', 'vote_average', 'vote_count']\n",
    "#col_names = ['vote_count', 'popularity']\n",
    "\n",
    "scaler = StandardScaler()\n",
    "\n",
    "X = my_data.to_numpy()\n",
    "\n",
    "X = scaler.fit_transform(X)\n",
    "\n",
    "\n",
    "kmeans = KMeans(n_clusters=3, init=\"k-means++\")\n",
    "kmeans.fit(X)\n",
    "y_kmeans = kmeans.predict(X)\n",
    "plt.scatter(X[:, 0], X[:, 1], c=y_kmeans, s=50, cmap='viridis')\n",
    "centers = kmeans.cluster_centers_\n",
    "print(centers)\n",
    "plt.scatter(centers[:, 0], centers[:, 1], c='black', s=200, alpha=0.5);\n",
    "\n",
    "\n",
    "# for a in range(rowsOfData):\n",
    "#     minDist = math.inf\n",
    "#     for b in range(centers.shape[0]):\n",
    "#         #print(X[a])\n",
    "#         #print(centers[b])\n",
    "#         distanceToACentroid = np.linalg.norm(X[a]-centers[b])\n",
    "#         if minDist > distanceToACentroid:\n",
    "#             minDist = distanceToACentroid\n",
    "#             minCentroid = b\n",
    "#     closestCentroid[minCentroid] = closestCentroid[minCentroid] + 1\n",
    "            \n",
    "# print(closestCentroid)\n",
    "plt.show()\n",
    "\n",
    "closestCentroid = np.zeros(shape=(centers.shape[0]))\n",
    "rowsOfData = X.shape[0];\n",
    "closestCentroidArray = np.zeros(shape=(rowsOfData,6))\n",
    "\n",
    "thisInstance = Kmeans()\n",
    "\n",
    "thisInstance.fit(X, 3, 50)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
